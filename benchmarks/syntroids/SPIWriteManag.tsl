/**** SPI-write-manager specification ****
    Description:
        SPI Write TopModule, submodules: clk and sdi (to send the address and data)
        Counts through the states and outputs them (counter) for submodules
        Recieves commands to write data to a certain register and processes them (if available)
    Inputs:
        "writeControl", command signal, either to write something or do nothing
        "prescaler", see Outputs
        "counter", see Outputs
    Outputs:
        "counter", counts with prescaled speed to thirtyfour, steps through the spi cycle
        "writeAddress", register address to be written to
        "writeData", register data to be written
        "writeResponse", main output: either true or false
        "prescaler", count to the scalingfactor limit, to prescale the counter
        "cs", spi chip select
    Predicates:
        (un)equalities
        "doWrite", checks if input commands the module to write, false if not
    Functions:
        "incmod", increase by one then mod the second argument
        "getWriteAddress", extracts the register address from the input command
        "getWriteData", extracts the data to write from the input command
    Constants:
        "scalingfactor", cycles to count, before prescaler does the next tick
        numbers, "high", "low", "top", "bot"
*/

always assume {
    [counter <- one()] -> F (eq counter fourty());
}

always guarantee {
    [prescaler <- inc prescaler];
    eqzi prescaler && !(eqz counter) <-> [counter <- incmod counter fourtytwo()];

    doWrite writeControl && eqz counter <-> [writeData <- getWriteData writeControl];
    doWrite writeControl && eqz counter <-> [writeAddress <- getWriteAddress writeControl];
    doWrite writeControl && eqz counter -> ([cs <- low()] U eq counter fourty());
    F [cs <- high()];    
    eq counter fourtyone() && eqzi prescaler <-> [writeResponse <- top()];
    !(eq counter fourtyone() && eqzi prescaler) <-> [writeResponse <- bot()];
    
    doWrite writeControl && eqz counter <-> [counter <- one()];
}
